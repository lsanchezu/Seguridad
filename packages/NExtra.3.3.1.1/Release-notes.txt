NExtra 3.3.0.0		2013-06-04
==============================

In this version, note that the Pagination namespace is renamed. It
is now named Collections.

- Renamed the NExtra.Pagination namespace to NExtra.Collections. I
also added a new OrderContext class to it.

- Added a NExtra.Extensions.Object_PropertyExtensions class with a
GetFullPropertyPath extension method that finds the full path name
for an object property.

- Added new OrderBy and ThenBy methods with descending argument to
IEnumerable_OrderByExtensions and IQueryable_OrderByExtensions. It
makes it easier to work with ordering, since it is now possible to
call one method instead of choosing between two.

- Added query parameter methods to NExtra.Extensions.UriExtensions.



NExtra 3.2.2.0		2013-05-14
==============================

- Added classes for basic authentication to NExtra.Web.Secutiry. I
first considered adding the interface to the core library, but the
whole concept of basic authentication is entirely web-based, so it
ended up in NExtra.Web.

- Together with the basic authentication stuff, I also added a new
action filter that can be used to make ASP.NET MVC actions require
basic authentication. It's located in NExtra.Mvc.ActionFilters and
is named RequireBasicAuthenticationAttribute.



NExtra 3.2.1.0		2013-05-13
==============================

This version contains a couple of new stuff for the NExtra project.

- Added a new NExtra.Console.TypedCommandLineArgumentParser, which
parses command line arguments into a CommandLineArguments instance.
The old CommandLineArgumentParser, which parses args into a string
dictionary, can be used by this new one.

- Added a new NExtra.Extensions.Assembly_FileExtensions extensions
class, with methods to find where assembly files are located.

- Added new file encoding resolver classes to NExtra.IO. There are
two IFileEncodingResolver implementations and a static class, that
can be used to detect what encoding that is used by a certain file.
However, the resolvers will still fail at resolving some encodings,
so share if you have a better implementation. Share, shaaaaare!



NExtra 3.2.0.0		2013-04-11
==============================

This update contains new features, file changes and some bug fixes.

I have started splitting larger extension files into smaller files
that correspond to a certain context. The name convention for this
new structure is is <Type>_<Context>Extensions. General extensions
will be named <Type>_Extensions.

Splitting the files will result in smaller, more lightweight and a
lot more modular classes. Also, a good thing is that the change in
no way affects how you use the extensions. Use the namespace, like
before, and you'll be good to go.

The file and class changes involve renaming namespaces and classes,
removing outdated classes, removing default constructor etc.


NExtra
------

New stuff:

- Added new Char_AsciiExtensions extension class with a method for
converting international chars to ASCII strings. It is used by the
new StringUrlifyer class.

- Added IPositionBearingCalculator and IPositionDistanceCalculator
interfaces as well as default implementations to NExtra.Geo.

- Added new Url namespace with an IUrlifier interface and a string
urlifier implementation.


Changes:

- Removed the default timespan Set method from NExtra.Cache.ICache.
It was only resulting in a larger interface with no benefits.

- Adjusted NExtra.Cache.MemoryCacheFacade so that the timeout does
not fail for certain times and time zones.

- Removed SMTP timeout definition in NExtra.Email.EmailSender. The
timeout was set to a very(!) small value, so consider it a bug fix.

- Renamed the NExtra.Extensions.StringExtensions String.To methods
to ConvertTo. Also added a new ConvertTo method, with a fallback.

- Split the NExtra.Geo.PositionHandler class into two classes (see
the "added" section). Why have a monster class when you can have a
set of smaller ones, right?

- Removed AdjustContent method in Extensions.WebRequest_Extensions.
It was a far too specific method to fit into the NExtra model.

- Removed all the default constructor parameter values for the old
Pagination.PaginationContext class and also extracted an interface.

- Renamed NExtra.Week to NExtra.Date and renamed parser classes to
resolver instead.

- Removed the default constructor for the WeekResolver class. This
forces everyone to specify exactly what they want instead of doing
the auto-Swede assume (that is bound to go wrong).


NExtra.Mvc
----------

- Added the NExtra.Mvc.ExtensionsIEnumerable_SelectListExtensions
extensions class. For now, it has a method that converts a string
collection to a SelectList instance.


NExtra.Web
----------

- Drastically simplified the avatar services in NExtra.Web.Avatar.
Now, the interface does not support a default size. This may seem
like a bad restriction, but it makes the model way cleaner.

- Removed all HTML5 related classes from NExtra.Web.Html, since I
find them to be outdated. So, HTML5 support check, HTML5 -> HTML4
conversion - bye bye.


NExtra.WebForms
---------------

- The Load and Unload methods of the UserControlPlaceHolder class
has been renamed to Add and Remove and the GetControls method has
been made public.


NExtra.WPF
----------

- The Controls/Extensions classes are moved to the root Extension
folder to gather all extension classes in one place.



NExtra 3.1.0.0		2013-04-04
==============================

In this version, I have added some new features, complete with the
unit tests needed to be a proud developer.

I will also start to add extension methods in separate files, if a
currently existing extension file contains methods that are not at
all related with the new one. The Extensions.StringExtensions, for
instance, contains general string related extension methods, while
the new Extensions.StringAsciiExtensions file contains methods for
ASCII operations only.


NExtra
------

- Added a new Extensions.NameValueCollectionExtensions class, with
corresponsing unit tests.

- Added a new Extensions.StringAsciiExtensions class that contains
a ReplaceInternationalChars method. It replaces å with a, ô with o
etc. and is used by the Extensions.StringUrlExtensions class.

- Added a new HasContent method to the Extensions.StringExtensions
class, together with corresponsing unit tests.

- Added a new Extensions

- Moved NExtra.Web.Security.IAuthenticationService into the NExtra
project, to make is useable in a wider context. Added an Authorize
method to is as well.

- Replaced the Validation.EmailAddressAttribute expression with an
expression that supports tiny e-mail addresses.


NExtra.WebForms
---------------

- Extended the FormsAuthenticationService with additional features.
These were added to the IAuthorizeService class as well.


NExtra.WebForms
---------------

- I have added a missing property flip when SubmittableUserControl
calls the OnSubmit method. Call it a bug fix...or a feature change.



NExtra 3.0.0.0		2013-01-23
==============================

In this version, I have refactored large parts of the code. I have
also been rather hard on myself, and removed stuff that I found to
be not that general and reusable as I first believed them to be.

Overall, I have modified large parts of the documentation and made
some parts easier to understand. I have also removed documentation
for class methods, where the documentation did not differ from the
interface documentation.


Nextra
------

- I have moved IConsole, ICommandLineArgumentParser as well as the
implementations to a new namespace, called Console.

- The week methods of the DateTimeExtensions class have been moved
to a new Interface (NExtra.IDateTimeWeekParser) as well as two new
implementations of this interface. They are  moved to NExtra.Week.

- The IEnumerableExtensions.Contains method has been removed. I am
sorry for ever adding it. I removed IsSingle as well, since it can
be rather easily re-implemented (can you sense the irony?).

- I have removed the Facade namespace with its only class. A class
that was nothing more than a wrapper class didn't feel relevant to
me anymore. I hope you agree.

- I renamed the RequiredMode enum to UseSeparator then moved it to
the Validation namespace, since it is only used there.


NExtra.Demo
-----------

This project has been entirely removed, since maintaining it was a
lot more painful than the demo was useful.


NExtra.EPiServer
----------------

This project has been entirely removed, since NExtra should not be
about extending products. It becomes too specific, and therefore I
decided to throw this part of NExtra far faar away.


NExtra.Web
----------

- The Avatar namespace classes have been changed to take a default
size as constructor parameter.

- I have some doubts about the Html namespace classes. Things move
fast and HTML5 support and being able to convert HTML5 to HTML4 is
perhaps not that needed anymore. Should I remove it?

- I have renamed the MD5 and SHA1 class in the NExtra.Web.Security
namespace, adding the FormsAuthenticationBased prefix to make them
differ from the NExtra.Security classes.

- I have added a GetNumberOfUsersOnline method that was added to a
IMembershipService instance before, but that I for some reason did
miss to add to the interface.


NExtra.WebForms
---------------

No changes, except cleaning up and improving class documentation.


NExtra.WebForms
---------------

- The Dialog namespace interfaces have been renamed so that they are
no longer suffixed with Facade.



.NExtra 2.6.5.0		2012-02-24
==============================

Since I now release new versions with small changes quite often, I
will bundle the release notes on build version level (x.x.X.x).

For instance, say I add a feature in 2.6.4.1 and then modify it in
2.6.4.2. Instead of adding a section in this file, I'll modify the
previous section. The 2.6.5.0 release notes will then finally be a
combination of all 2.6.4.x release notes.

The new NExtra.Web.Cookies.ICookieInvalidator and the domain-based
DomainCookieInvalidator implementation can invalidate one or every
cookie for a certain domain. The DomainCookieInvalidator will only
invalidate cookies if the request host matches its host condition.

One example when cookie invalidation may be a good idea is when an
IIS instance is set to handle static content. For more about these
situations, have a look at this video (thank you, @JoakimWestin) :  
http://www.youtube.com/watch?v=wHdvL4irsiQ&feature=player_embedded

In NExtra.Reflection, I have added a new ITypeLocator interface as
well as a default TypeLocator implementation. They are a great way
to find all the classes that implement a certain interface or that
inherit a certain base class.

I have also removed some constructors from the cookie classes. The
default HttpContext.Current usage was not good, so I removed those
constructors. In fact, I converted them to use custom HttpContexts
that automatically wraps into an HttpContextWrapper.



.NExtra 2.6.4.0		2012-02-23
------------------------------

This release features improved cookie handling and testing classes.
If you implement your own IHttpCookieHandler, you will have to add
a couple of methods, since the interface has grown.

The NExtra.Web.HttpContextCookieHandler class is rewritten to make
it possible to inject any HttpContextBase. It has been drastically
improved and supports more operations. I have also covered it with
unit tests.

All classes in NExtra.Web.Testing have been rewritten so that they
have no default constructors. I have also added a FakeHttpResponse
class, which is used by the FakeHttpContext class.



.NExtra 2.6.3.0		2012-02-06
------------------------------

I have finally finished tweaking the build and publish scripts, so
that the release process will be quick and automated. The versions
that led to this release have contained some experimental moves to
and from various folders, but the current setup will probably do.

From now on, with more frequent releases, I will add release notes
only when I make functional changes to the library. Changes to any
files and folders out of the solution will not receive a node.

In this version, I have added three read methods to IConsole. They
can be used to mock out reading from the command line. I have also
optimized some classes using NDepend as analysis tool.



.NExtra 2.6.2.0		2012-02-02
------------------------------

This release features build scripts that makes building releases a
great deal simpler for me.

I have added yet another class to the NExtra.IO namespace. The new
PathPatternMatcher class can be used to see if a file or directory
name matches a certain pattern, e.g. foo*.txt, *.txt, *foo*.



.NExtra 2.6.1.0		2012-01-31
------------------------------

In this version, I have updated the readme file instructions. Also,
the return type of two assembly extension methods are changed from
IList to IEnumerable.

I have added two new interface-based classes to Nextra.IO. One can
be used to work with directories and one with files. They are nice
to have if you need an abstract layer between your classes and the
file system.



.NExtra 2.6.0.0		2012-01-10
------------------------------

This version is a real API breakier. If you are using any previous
versions of .NExtra, read this information carefully.

I have added two new hash generators to NExtra.Security. They will
probably make the ones in NExtra.Web.Security useless, but the old
implementations are still there.

I have added two new SSN validators to the Validation namespace. A
new IValidator interface is applied to all validators as well.

The new NExtra.Geo.IDistanceConverter interface has been extracted
from DistanceConverter. The same goes for IAngleConverter.


Regarding API breaking changes, I have decided to include them all
in this version so that future releases will be stable...ish.

The most important API breaker to notice is that I have decided to
remove all "abstraction" namespaces, to remove circular references
and removing the need to use two (or more) namespaces.

The NExtra.ValidationAttributes namespace has been re-renamed, and
is now (once again) called Validation. SSN validators are moved to
a separate namespace, as has the Zip related validators.

The NExtra.Web.Abstractions.IVirtualPathProviderFacade was removed
as well, since it was not used anywhere in the library.
	
The previously non-static NExtra.Testing.MetadataRegistrator class
has been made static. If you use it, just remove any instance.

Some unnecessary throws have been removed. The code will fail even
without them, so why have them?

And while I am already breaking the API everywhere, I have changed
several things in NExtra.Documentation. I may even remove it later.

And while...yeah, you probably get it by now. I have decided to do
a rewind for all the ICanX interfaces and rename them.

NExtra.UI and all its classes (two useless ones) have been removed.
If you use them and need them still, you need serious help.

Moving on to the NExtra.Web project, all HTML related classes have
been moved into a new Html namespace. Cookie handlers are moved to
NExtra.Web.Cookies. Html related http modules and response filters
are moved to NExtra.Html. Finally, SyndicationFeedLoader was moved
to the new NExtra.Syndication namespace, in the core project.

In NExtra.WinForms, I have moved the classes and interfaces around
into (I hope) a better structure.

Forgive me! Dear god, forgive me.



.NExtra 2.5.2.0		2011-12-06
------------------------------

I have added a new ValidationAttributes.PhoneNumberAttribute class.
It is really basic and allows an intial, optional +, followed by a
set of digits and spaces, followed by an optional -, then followed
by a last set of digits and spaces.

A brand new Cache section has been added to the NExtra project. It
has a basic ICache interface, a really simple dictionary cache and
a MemoryCache facade. NExtra.Web has a Cache section as well, with
an IHttpRuntimeCache interface and a HttpRuntime.Cache facade.

The NExtra.Extensions.ObjectExtensions class has a new non-generic
clone method that returns object instead of a certain type.

I have adjusted the Nextra.Web.Html5ElementConverter class so that
it adds no extra content to the end tag. Thanks, Petter :)

Finally, I have decided to let the demo section rot. The unit test
suite and the source code should be enough for developers who want
to learn .NExtra. Still, if anyone wants to keep the demos in good
shape, feel free to do so and push the changes to the public repo.



.NExtra 2.5.1.0		2011-11-27
------------------------------

I have fixed a bug in NExtra.Mvc.Testing.ControllerExtensions. The
CallWithModelValidation method used to assume that the MemberNames
property of each error did always contain an element. However, for
Compare validators, this is not the case.

The NExtra.Localization.HieararchicalResourceManagerFacade now has
two constructors instead of the previous one with one required and
one optional parameter. I will probably remove optional parameters
elsewhere in future versions.

In order to make client-side validation easier to use with all the
validation attributes in NExtra.ValidationAttributes, every regex-
based attribute now expose its internal expression, so that models
can use either the attribute directly or embed the expression in a
RegularExpressionAttribute (which works client-side).

The NExtra.Mvc.ActionFilters.OutputModelAttribute has been renamed
to JsonForQueryStringAttribute. It's quite more obvious.

The NExtra.Mvc.Extensions.WebViewPageExtensions has been rewritten
to use the HtmlHelper classes for local and global resources. Both
can be used, although only one should really be needed.

Finally and VERY IMPORTANT, is that no NExtra.ValidationAttributes
inherit from OptionalRegularExpressionAttribute from now on. These
classes now inherit directly from RegularExpressionAttribute. This
makes them OPTIONAL. If you need them to be required, combine them
with a Required attribute.

The affected validation attributes are:
 NExtra.ValidationAttributes.EmailAddressAtttribute
 NExtra.ValidationAttributes.GuidAtttribute
 NExtra.ValidationAttributes.IpAddressAttribute
 NExtra.ValidationAttributes.SwedishPostalCodeAttribute
 NExtra.ValidationAttributes.SwedishSsnAttribute

Since it is no longer used, the OptionalRegularExpressionAttribute
class has been removed. If anyone else uses it, well...let me know.
I have also removed some old, obsolete components as well.

A new documentation guideline I will try to stick to to reduce the
amount of comments is to have a comment per method for all methods
that are not part of a facade class like Console and ProcessFacade.
I have supressed 1591 to make related warnings disappear.



.NExtra 2.5.0.0		2011-10-19
------------------------------

Many new stuff and a new project name. I think this calls for some
minor version leaping.

I have changed the name from .NET Extensions to .NExtra, since the
old name was very general and said nothing about the library. This
new name will, I hope, work better.

I decided to switch from Google Code to GitHub since I host almost
all of my other personal projects there. Google Code has been (and
is still) great, but GitHub works better for me.

From now on, I will write less documentation for .NExtra since the
most of the code in this NExtra is self-explanatory. I have caught
myself writing absurd documentation only because all previous code
has been documented.

But what about the news?

This new version contains several new features, like an MVC helper,
logging utilities, a generic event arguments, a (borrowed) command
argument parser, several extension method additions etc. So, there
is a lot of new stuff to play around with.

The new generic NExtra.EventArgs class is a generic version of the
native EventArgs class. Use it to add a typed object with your arg.

The new NExtra.CommandLineArgumentParser class is a new, interface-
based version of a nice, clean implementation that can be found at:
http://www.codeproject.com/KB/recipes/command_line.aspx. Use it to
easily parse arguments that are sent to an application.
	
The new NExtra.Logging namespace contains a few new classes, enums
and interfaces that can be used when working with logging.

The new IConsole and ConsoleFacade are (so far) small and contains
two write methods for working towards the Console. I use them in a
private project, so they only has methods that I use, for now.

The same goes for Diagnostics.ProcessFacade and IProcess. They are
rather small, and can be used for working toward the Process class.
They should probably be extended as well.

I have added a couple of extension classes to NExtra.Extensions. I
have also added methods to already existing classes.

The NExtra.Web.Security.MembershipFacade has been extended to be a
more complete facade for the Membership and MembershipUser classes.

The new NExtra.Mvc.HtmlHelpers.FormBlockForHelper class can wrap a
form element (EditorFor, TextAreaFor etc.) in a structure with one
div with a LabelFor and one with the provided editor as well as an
editor-bound ValidationMessageFor.

The new NExtra.Mvc.HtmlHelpers.Conditional can be used to output a
value out of two possible ones, depending on a bool expression. It
can be used to avoid having to write all those nasty if-statements
in your views.



.NET Extensions 2.3.0.1		2011-08-17
--------------------------------------

I quickly applied a hot fix for the metadata provider and replaced
the 2.3.0 release with this one.



.NET Extensions 2.3.0.0		2011-08-17
--------------------------------------

In this version of .NET Extensions, I have made added some classes
that can be used to simplify working with metadata, unit tests and
localization...especially localization!


Braking changes:

The NExtra.Localization.Abstractions.ICanTranslate intrface
has been renamed to ITranslator and has changed its contract. This
new version will thus NOT WORK with any systems that use the older
version of the framework.

Another change that makes this version incompatible with any older
versions is that NExtra.Testing.MetadataTypeRegistrator has
been renamed to MetadataRegistrator.

I will be better at marking obsolete stuff as obsolete from now on.


Metadata:

I have added a brand new MetadataValidator class, that can be used
to validate metadata conditions, e.g. in unit tests.

And speaking of unit tests, I have added two fake classes that can
be used to setup fake HTTP contexts and requests. You can find the
classes in NExtra.Web.Testing.


Localization:

The next big thing about this release is localization and how .NET
Extensions can be used to translate stuff for various systems. The
classes and interfaces that handle localization are found within a
Localization root namespace in each project.

The new NExtra.Localization.ResourceManagers namespace will
contain resource managers that can translate language keys. Inside
it, I have placed two brand new classes; ResourceManagerFacade and
HierarchicalResourceManagerFacade.

The ResourceManagerFacade class will require an exact language key
match while the HierarchicalResourceManagerFacade class will strip
the provided key part by part until a translation is found, IF one
is found, e.g. Domain_User_UserName => User_UserName => UserName.

Finally, I did add a LocalizedDataAnnotationsModelMetadataProvider
metadata provider to NExtra.Mvc.Localizaion. Use it to make
ASP.NET MVC automatically translate any DisplayName attributes and
the ErrorMessage for any validation attributes. It can be set to a
friendly "preserve" mode, which keeps any already defined messages,
or be set to override everything that is already defined.

The provider will create a <Type.FullName>_<PropertyName> key when
translating display names. When translating error messages, it use
<Type.FullName>_<PropertyName>_<ValidationAttributeName>Error. The
HierarchicalResourceManagerFacade translator can be used to easily
translate a lot of properties and error messages with few language
keys, which can save a lot of work.


Avatars:

I have added two small classes, that can be used to handle avatars.
Under NExtra.Web.Avatar, you find a Gravatar and a Facebook
implementation.



.NET Extensions 2.2.2	2011-08-14
-----------------------------------

This released features some new functionality and has been cleaned
of old, deprecated components. Undocumented interfaces and classes
are now fully documented as well.

The ControllerExtensions.ControllerName(...) method was renamed to
Name(...) a while ago. The deprecated backup method is now deleted.

NExtra.Web.Security.Abstractions.IAuthenticationFacade is a
contract and not an implementation. It should thus not be called a
facade, since any classes that implement it could behave different
and not be a facade at all. The interface has thus been renamed to
IAuthenticationService. The facade interface is marked as obsolete.

As with the IAuthenticationFacade interface, the IMembershipFacade
interface has been renamed to IMembershipService, and IRolesFacade
has been renamed to...IRolesService (suprise!)

The NExtra.IO.Abstractions.ICanResolveFileSize interface is
removed, since it was (probably) the most worthless interface ever.



.NET Extensions 2.2.1	2011-08-09
----------------------------------

This small release features some new functionality, without any of
the structural change-mess of the most recent releases.

I have added a "required" constructor parameter to some classes in
the NExtra.ValidationAttributes namespace, so that they can
be set to optional as well. To avoid changing the classes' default
behavior, the default value of the parameter is true.

The NExtra.Extensions.StringExtensions.IsNullOrEmpty method
does not have a trim parameter anymore, since it made things weird.
It is IMPORTANT that you change any code where the methods is used,
if trimming is of concern to you. 

The NExtra.WebForms.WebControls.IFrame class has been a bit
optimized to reduce the number of inline instructions. Nothing big,
but maybe worth mentioning.

New classes/interfaces:
NExtra.Globalization.Abstractions.ICanTranslate

New methods:
NExtra.Extensions.IEnumerableExtensions.Contains
NExtra.Extensions.StringCollectionExtensions.AsEnumerable	



.NET Extensions 2.2.0	2011-06-13
----------------------------------

This release features a new NExtra.Web project. It contains
all System.Web dependent functionality that was previously defined
in the core project. The entire NExtra.Encryption namespace
has been moved here as well, but I will try to rewrite the MD5 and
SHA1 classes as well as Json, so that they do not need System.Web.

I have adjusted the IsSameDate function in DateTimeExtensions, and 
have also removed the RemoveTime method, since it is equal to Date.

I have replaced the NExtra.Extensions.FlagsExtensions class
with the NExtra.Extensions.EnumExtensions class. It extends
enums instead of ints/uints, which is a big improvement.

The NExtra.Extensions.StringExtensions.CountSubstring class
had a bug, that caused invalid counts when the sub string appeared
in sequence. This bug has been fixed.

NExtra.ValidationAttributes.SwedishSsnAttribute is modified
to allow selecting whether to use a dash or not.

In NExtra.MVC.Extensions.ControllerExtensions, I decided to
rename the Controller method to Name. The old method is now marked 
as deprecated, and will be removed...well, sometime.

I have added two new HTML helpers to NExtra.MVC.HtmlHelpers,
which simplifies working with global and local resource files.

I decided to delete the Json class, since it was nothing more than
a static facade for JavaScriptSerializer. Use this native class if
you need to serialize objects with JSON, or use any of the various
MVC helpers that exist, such as Json.Encode.

The demo project has been rewritten from scratch, and now uses the
Razor view engine instead of Spark. It also features demos for all
classes in .NET Extensions as well as the Web and Mvc projects.


New interfaces:
NExtra.Secutiry.Abstractions.ICanGenerateHashValue
NExtra.Web.Security.Abstractions.IAuthenticationFacade
NExtra.Web.Security.Abstractions.IMembershipFacade
NExtra.Web.Security.Abstractions.IRolesFacade

New classes:
NExtra.MVC.HtmlHelpers.GlobalResourceHtmlHelper
NExtra.MVC.HtmlHelpers.LocalResourceHtmlHelper
NExtra.ValidationAttributes.MinLengthAttribute
NExtra.Web.Security.FormsAuthenticationFacade
NExtra.Web.Security.MembershipFacade
NExtra.Web.Security.RolesFacade
NExtra.Web.Testing.FakeMembershipUser

Renamed/moved classes:
NExtra.Encryption.Md5Generator		=> NExtra.Web.Security.Md5Generator
NExtra.Encryption.Sha1Generator		=> NExtra.Web.Security.Sha1Generator
NExtra.Extensions.FlagsExtensions	=> NExtra.Extensions.EnumExtensions
NExtra.Web.Json

Renamed/moved methods:
NExtra.Mvc.Extensions.ControllerExtensions.Controller	=>	NExtra.Mvc.Extensions.ControllerExtensions.Name

Removed methods:
NExtra.Extensions.DateTimeExtensions.RemoveTime



.NET Extensions 2.1.2	2011-06-07
----------------------------------

This release is a hotfix, where the demo project has no references
to NExtra.MVC. I will upgrade the demo project to use MVC 3,
although that will probably require a Spark update as well.

I have also added a new solution folder called _Resources in which
I have placed the README and Release-notes text files.



.NET Extensions 2.1.1	2011-06-03
----------------------------------

This release features a few new classes and functions as well as a
structural change that has to be handled when upgrading from 2.1.0.

The major change is that the NExtra.Attributes namespace is
renamed to NExtra.ValidationAttributes. I think it is a lot
better, but it may require you to make some changes if you upgrade.

A quite cool addition is NExtra.Extensions.ObjectExtensions,
which makes it possible to clone an object of any kind, as long as
it is marked as Serializable.

New classes:
NExtra.Attributes.IpAddressAttribute (+ demo & tests)
NExtra.Extensions.ObjectExtensions (+ demo & tests)
NExtra.Extensions.StructExtensions (+ demo & tests)
NExtra.Mvc.ActionFilters.OutputModelFilter (+ demo)
NExtra.Mvc.Testing.ControllerExtensions
NExtra.WPF.Extensions.WindowExtensions

New methods:
NExtra.Extensions.IEnumerableExtensions.IsNullOrEmpty()
NExtra.Extensions.IEnumerableExtensions.IsSingle()



Older release notes have been removed
-------------------------------------


